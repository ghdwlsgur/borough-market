# RErun2
version: 2.1
orbs:
  node: circleci/node@5.0.3
  aws-cli: circleci/aws-cli@3.1.3
jobs:
  aws-cli-cred-setup:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_ACCESS_SECRET
          aws-region: AWS_REGION
      - run: >-
          aws iam get-login-profile --user-name ${AWS_USERNAME}

  build-image:
    working_directory: ~/project/server
    docker:
      - image: docker:22.06-rc-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17
      - run:
          name: Docker login
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
      - run:
          name: Docker build and push node image to docker hub
          command: |
            cd server
            docker build -t redmax45/borough-market-node:${CIRCLE_SHA1} ./
            docker push redmax45/borough-market-node:${CIRCLE_SHA1}
      - run:
          name: Docker build and push nginx image to docker hub
          command: |
            cd nginx 
            docker build -t redmax45/borough-market-nginx:${CIRCLE_SHA1} ./
            docker push redmax45/borough-market-nginx:${CIRCLE_SHA1}
  express-test:
    executor:
      name: node/default
      tag: 16.17.1
    steps:
      - checkout
      - run: cd server && sudo npm install -g npm@latest
      - restore_cache:
          name: Restore Npm Package Cache
          keys:
            - v1-dependencies-{{ checksum "server/package.json" }}
            - v1-dependencies-
      - save_cache:
          name: Save Npm Package Cache
          paths:
            - server/node_modules
          key: v1-dependencies-{{ checksum "server/package.json" }}
      - run:
          name: Npm install
          command: cd server && npm install
      - run:
          name: Set mongodb credentials in environment
          command: export mongoURI=${mongoURI}
      - run:
          name: Node.js server responds 200 code
          command: cd server && npm test

  tag-and-push-image-to-ecr:
    docker:
      - image: docker:22.06-rc-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17
      - run:
          name: Download and install docker compose and awscli
          environment:
            COMPOSE_VERSION: "3"
          command: |
            apk update && apk upgrade && apk --no-cache add py-pip
            pip install awscli
      - run:
          name: Configure aws credentials
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile default
            aws configure set aws_secret_access_key ${AWS_ACCESS_SECRET} --profile default
            aws configure set region ${AWS_REGION} --profile default
      - run:
          name: Execute aws ecr get-login-password
          command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - run:
          name: Start all services declared in docker-compose.yml and docker-compose local test
          command: |
            cd deployment-local
            if [ "$(docker network ls | grep "nginx_network" | awk '{print $2}')" != "nginx_network" ]; then 
              docker network create nginx_network
            fi             
            export version=${CIRCLE_SHA1} && export mongoURI=${mongoURI} 
            docker-compose up -d
      - run:
          name: Push nginx images to ecr
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then 
              docker tag redmax45/${AWS_RESOURCE_NAME_PREFIX}-nginx:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:nginx-${CIRCLE_SHA1}
              docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:nginx-${CIRCLE_SHA1}
            fi
      - run:
          name: Push node images to ecr
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then      
              docker tag redmax45/${AWS_RESOURCE_NAME_PREFIX}-node:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:node-${CIRCLE_SHA1}
              docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:node-${CIRCLE_SHA1}
            fi
      - run:
          name: Push mongo images to ecr
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then                   
              docker tag redmax45/mongo:0.1 ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:mongo-${CIRCLE_SHA1}
              docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:mongo-${CIRCLE_SHA1}
            fi
      - run:
          name: Tear down
          command: docker-compose down -v

  deploy-service-update:
    docker:
      - image: docker:22.06-rc-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17
      - run:
          name: Download and install docker compose and awscli
          environment:
            COMPOSE_VERSION: "3"
          command: |
            apk update && apk upgrade && apk add curl && apk add jq                         
            curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
            chmod +x /usr/local/bin/ecs-cli

            apk --no-cache add py-pip
            pip install awscli
      - run:
          name: Configure aws credentials
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile default
            aws configure set aws_secret_access_key ${AWS_ACCESS_SECRET} --profile default
            aws configure set region ${AWS_REGION} --profile default
      - run:
          name: Service update and deploy using ecr repository image
          command: |
            ecs-cli configure --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --default-launch-type EC2 --config-name ${AWS_RESOURCE_NAME_PREFIX}-cluster --region ${AWS_REGION}

            export CIRCLE_SHA1=${CIRCLE_SHA1}
            export mongoURI=${mongoURI}
            export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
            export AWS_REGION=${AWS_REGION}
            export AWS_RESOURCE_NAME_PREFIX=${AWS_RESOURCE_NAME_PREFIX}

            ecs-cli compose --project-name nginx --file docker-compose.yml  \
            --debug service up \
            --deployment-max-percent 100 --deployment-min-healthy-percent 0 \
            --region ${AWS_REGION} --ecs-profile default --cluster-config ${AWS_RESOURCE_NAME_PREFIX}-cluster
      - run:
          name: Application load balancer http response check
          command: |
            #!/bin/bash 

            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services nginx --region ${AWS_REGION} | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN --region ${AWS_REGION} | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN --region ${AWS_REGION} | jq -r '.LoadBalancers[0].DNSName')

            STATUS=$(curl -s -o /dev/null -I -w "%{http_code}" http://$ELB_DNS_NAME)

            if [ $STATUS -eq 200 ]; then 
              echo "SUCCESS"
            fi

workflows:
  aws-credentials-validate:
    jobs:
      - aws-cli-cred-setup:
          context: aws

  build-and-deploy:
    jobs:
      - build-image:
          filters:
            branches:
              only:
                - master
      - express-test:
          filters:
            branches:
              only:
                - master
          requires:
            - build-image
      - tag-and-push-image-to-ecr:
          filters:
            branches:
              only:
                - master
          requires:
            - express-test
      - deploy-service-update:
          filters:
            branches:
              only:
                - master
          requires:
            - tag-and-push-image-to-ecr
