version: 2.1
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/aws-ecr?version=7.3.0
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.3
jobs:
  aws-cli-cred-setup:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_ACCESS_SECRET
          aws-region: AWS_REGION

  # https://circleci.com/docs/docker-compose
  build-and-tag-image:
    docker:
      - image: docker:17.05.0-ce-git
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.12
      - run:
          name: Download and install docker compose
          environment:
            COMPOSE_VERSION: "2.5.0"
          command: |
            apk update && apk upgrade && apk add curl  
            curl -L "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-linux-x86_64" -o ~/docker-compose  
            chmod +x ~/docker-compose  
            mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Build images of services declared in docker-compose.yml
          command: docker-compose build
      - run:
          name: Start all services declared in docker-compose.yml
          command: docker-compose up -d
      - run:
          name: Tear down
          command: docker-compose down -v
      - run:
          name: Tag docker images
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then                                  
              docker tag ${AWS_RESOURCE_NAME_PREFIX}-node:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:node              
              docker tag mongo:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:mongo
            fi
workflows:
  aws-credentials-validate:
    jobs:
      - aws-cli-cred-setup:
          context: aws
  build-and-deploy:
    jobs:
      - build-and-tag-image:
          filters:
            branches:
              only:
                - master
      - aws-ecr/build-and-push-image:
          account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "${AWS_RESOURCE_NAME_PREFIX}-node"
      # https://circleci.com/developer/orbs/orb/circleci/aws-ecr
      # - aws-ecr/build_and_push_image:
      #     account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
      #     repo: "${AWS_RESOURCE_NAME_PREFIX}"
      #     region: ${AWS_REGION}
      #     tag: "${AWS_RESOURCE_NAME_PREFIX}-node"
      #     requires:
      #       - build-and-tag-image

      # - aws-ecr/build-and-push-image:
      #     aws-cli-version: latest
      #     aws-access-key-id: AWS_ACCESS_KEY
      #     aws-secret-access-key: AWS_ACCESS_SECRET
      #     executor: aws-ecr/default
      #     repo: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
      #     registry-id: AWS_ACCOUNT_ID
      #     region: "${AWS_REGION}"
      #     repo-scan-on-push: true
      #     push-image: true
      #     tag: "${AWS_RESOURCE_NAME_PREFIX}-node"
      #     requires:
      #       - build-and-tag-image
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
            # - build-and-tag-image
          aws-region: AWS_REGION
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
          verify-revision-is-deployed: true
          post-steps:
            - run:
                name: Test the deployment
                command: |
                  TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
                  ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
                  ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
                  curl -s --retry 10 http://$ELB_DNS_NAME | grep "Welcome to nginx!"
