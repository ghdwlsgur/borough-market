version: 2.1
orbs:
  node: circleci/node@5.0.3
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.3
jobs:
  aws-cli-cred-setup:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_ACCESS_SECRET
          aws-region: AWS_REGION

  build-image:
    working_directory: ~/project/server
    docker:
      - image: docker:22.06-rc-git
        auth:
          username: ${DOCKER_USERNAME}
          password: ${DOCKER_PASSWORD}
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17
      - run:
          name: Docker login
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
      - run:
          name: Docker build and push image to docker hub
          command: |
            cd server
            docker build -t redmax45/borough-market-node:${CIRCLE_SHA1} ./
            docker push redmax45/borough-market-node:${CIRCLE_SHA1}

  express-test:
    executor:
      name: node/default
      tag: 16.17.1
    steps:
      - checkout
      - run: cd server && sudo npm install -g npm@latest
      - restore_cache:
          name: Restore Npm Package Cache
          keys:
            - v1-dependencies-{{ checksum "server/package.json" }}
            - v1-dependencies-
      - save_cache:
          name: Save Npm Package Cache
          paths:
            - server/node_modules
          key: v1-dependencies-{{ checksum "server/package.json" }}
      - run:
          name: Npm install
          command: cd server && npm install
      - run:
          name: Set mongodb credentials in environment
          command: export mongoURI=${mongoURI}
      - run:
          name: Node.js server responds 200 code
          command: cd server && npm test

  tag-and-push-image-to-ecr:
    docker:
      - image: docker:22.06-rc-git
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17
      - run:
          name: Download and install docker compose and awscli
          environment:
            COMPOSE_VERSION: "2.5.0"
          command: |
            apk update && apk upgrade && apk add curl  
            curl -L "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-linux-x86_64" -o ~/docker-compose  
            chmod +x ~/docker-compose  
            mv ~/docker-compose /usr/local/bin/docker-compose

            apk --no-cache add py-pip
            pip install awscli
      - run:
          name: Configure aws credentials
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile default
            aws configure set aws_secret_access_key ${AWS_ACCESS_SECRET} --profile default
            aws configure set region ${AWS_REGION} --profile default
      - run:
          name: Execute aws ecr get-login-password
          command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - run:
          name: Start all services declared in docker-compose.yml
          command: export version=${CIRCLE_SHA1} && docker-compose up -d
      - run:
          name: Push node images to ecr
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then      
              docker tag redmax45/${AWS_RESOURCE_NAME_PREFIX}-node:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:node-${CIRCLE_SHA1}
              docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:node-${CIRCLE_SHA1}
            fi
      - run:
          name: Push mongo images to ecr
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then     
              docker tag mongo:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:mongo-${CIRCLE_SHA1}
              docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:mongo-${CIRCLE_SHA1}
            fi
      - run:
          name: Tear down
          command: docker-compose down -v

workflows:
  aws-credentials-validate:
    jobs:
      - aws-cli-cred-setup:
          context: aws

  build-and-deploy:
    jobs:
      - build-image:
          filters:
            branches:
              only:
                - master
      - express-test:
          filters:
            branches:
              only:
                - master
          requires:
            - build-image
      - tag-and-push-image-to-ecr:
          filters:
            branches:
              only:
                - master
          requires:
            - express-test

      # - aws-ecs/deploy-service-update:
      #     requires:
      #       - tag-and-push-image-to-ecr
      #     aws-access-key-id: AWS_ACCESS_KEY
      #     aws-secret-access-key: AWS_ACCESS_SECRET
      #     aws-region: AWS_REGION
      #     family: "${AWS_RESOURCE_NAME_PREFIX}-service"
      #     cluster: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
      #     container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:node-${CIRCLE_SHA1}"
      #     verify-revision-is-deployed: true
      #     post-steps:
      #       - run:
      #           name: Test the deployment
      #           command: |
      #             TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
      #             ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
      #             ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
      #             curl -s --retry 10 http://$ELB_DNS_NAME | grep "Welcome to nginx!"
